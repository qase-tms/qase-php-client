<?php
/**
 * Result
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Qase\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Qase.io API
 *
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Qase\Client\Model;

use \ArrayAccess;
use \Qase\Client\ObjectSerializer;

/**
 * Result Class Doc Comment
 *
 * @category Class
 * @package  Qase\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Result implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hash' => 'string',
        'comment' => 'string',
        'stacktrace' => 'string',
        'runId' => 'int',
        'caseId' => 'int',
        'steps' => '\Qase\Client\Model\TestStepResult[]',
        'status' => 'string',
        'isApiResult' => 'bool',
        'timeSpentMs' => 'int',
        'endTime' => '\DateTime',
        'attachments' => '\Qase\Client\Model\Attachment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hash' => null,
        'comment' => null,
        'stacktrace' => null,
        'runId' => 'int64',
        'caseId' => 'int64',
        'steps' => null,
        'status' => null,
        'isApiResult' => null,
        'timeSpentMs' => 'int64',
        'endTime' => 'date-time',
        'attachments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hash' => false,
		'comment' => true,
		'stacktrace' => true,
		'runId' => false,
		'caseId' => false,
		'steps' => true,
		'status' => false,
		'isApiResult' => false,
		'timeSpentMs' => false,
		'endTime' => true,
		'attachments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
        'comment' => 'comment',
        'stacktrace' => 'stacktrace',
        'runId' => 'run_id',
        'caseId' => 'case_id',
        'steps' => 'steps',
        'status' => 'status',
        'isApiResult' => 'is_api_result',
        'timeSpentMs' => 'time_spent_ms',
        'endTime' => 'end_time',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
        'comment' => 'setComment',
        'stacktrace' => 'setStacktrace',
        'runId' => 'setRunId',
        'caseId' => 'setCaseId',
        'steps' => 'setSteps',
        'status' => 'setStatus',
        'isApiResult' => 'setIsApiResult',
        'timeSpentMs' => 'setTimeSpentMs',
        'endTime' => 'setEndTime',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
        'comment' => 'getComment',
        'stacktrace' => 'getStacktrace',
        'runId' => 'getRunId',
        'caseId' => 'getCaseId',
        'steps' => 'getSteps',
        'status' => 'getStatus',
        'isApiResult' => 'getIsApiResult',
        'timeSpentMs' => 'getTimeSpentMs',
        'endTime' => 'getEndTime',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('stacktrace', $data ?? [], null);
        $this->setIfExists('runId', $data ?? [], null);
        $this->setIfExists('caseId', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('isApiResult', $data ?? [], null);
        $this->setIfExists('timeSpentMs', $data ?? [], null);
        $this->setIfExists('endTime', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets stacktrace
     *
     * @return string|null
     */
    public function getStacktrace()
    {
        return $this->container['stacktrace'];
    }

    /**
     * Sets stacktrace
     *
     * @param string|null $stacktrace stacktrace
     *
     * @return self
     */
    public function setStacktrace($stacktrace)
    {
        if (is_null($stacktrace)) {
            array_push($this->openAPINullablesSetToNull, 'stacktrace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stacktrace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stacktrace'] = $stacktrace;

        return $this;
    }

    /**
     * Gets runId
     *
     * @return int|null
     */
    public function getRunId()
    {
        return $this->container['runId'];
    }

    /**
     * Sets runId
     *
     * @param int|null $runId runId
     *
     * @return self
     */
    public function setRunId($runId)
    {
        if (is_null($runId)) {
            throw new \InvalidArgumentException('non-nullable runId cannot be null');
        }
        $this->container['runId'] = $runId;

        return $this;
    }

    /**
     * Gets caseId
     *
     * @return int|null
     */
    public function getCaseId()
    {
        return $this->container['caseId'];
    }

    /**
     * Sets caseId
     *
     * @param int|null $caseId caseId
     *
     * @return self
     */
    public function setCaseId($caseId)
    {
        if (is_null($caseId)) {
            throw new \InvalidArgumentException('non-nullable caseId cannot be null');
        }
        $this->container['caseId'] = $caseId;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Qase\Client\Model\TestStepResult[]|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Qase\Client\Model\TestStepResult[]|null $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            array_push($this->openAPINullablesSetToNull, 'steps');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('steps', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets isApiResult
     *
     * @return bool|null
     */
    public function getIsApiResult()
    {
        return $this->container['isApiResult'];
    }

    /**
     * Sets isApiResult
     *
     * @param bool|null $isApiResult isApiResult
     *
     * @return self
     */
    public function setIsApiResult($isApiResult)
    {
        if (is_null($isApiResult)) {
            throw new \InvalidArgumentException('non-nullable isApiResult cannot be null');
        }
        $this->container['isApiResult'] = $isApiResult;

        return $this;
    }

    /**
     * Gets timeSpentMs
     *
     * @return int|null
     */
    public function getTimeSpentMs()
    {
        return $this->container['timeSpentMs'];
    }

    /**
     * Sets timeSpentMs
     *
     * @param int|null $timeSpentMs timeSpentMs
     *
     * @return self
     */
    public function setTimeSpentMs($timeSpentMs)
    {
        if (is_null($timeSpentMs)) {
            throw new \InvalidArgumentException('non-nullable timeSpentMs cannot be null');
        }
        $this->container['timeSpentMs'] = $timeSpentMs;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param \DateTime|null $endTime endTime
     *
     * @return self
     */
    public function setEndTime($endTime)
    {
        if (is_null($endTime)) {
            array_push($this->openAPINullablesSetToNull, 'endTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endTime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Qase\Client\Model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Qase\Client\Model\Attachment[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


